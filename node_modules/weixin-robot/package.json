{
  "name": "weixin-robot",
  "version": "0.4.2-1",
  "repository": {
    "type": "git",
    "url": "git://github.com/node-webot/weixin-robot.git"
  },
  "description": "微信公众平台开放消息接口机器人 A robot for wechat.",
  "author": {
    "name": "Jesse Yang",
    "email": "kissmud@gmail.com",
    "url": "https://github.com/ktmud"
  },
  "dependencies": {
    "debug": "~0.7.2",
    "webot": "~0.1.2",
    "wechat": "~0.4.2"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "jscover": "*",
    "supertest": "*",
    "ejs": "*",
    "connect": "*"
  },
  "engines": {
    "node": ">=0.6.0",
    "npm": ">=1.1.6"
  },
  "keywords": [
    "weixin",
    "robot",
    "webot",
    "wechat"
  ],
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -R spec"
  },
  "license": "MIT",
  "contributors": [
    {
      "name": "Jesse Yang",
      "email": "jyyjcc@gmail.com"
    },
    {
      "name": "TZ",
      "email": "atian25@qq.com"
    },
    {
      "name": "Jackson Tian",
      "email": "shyvo1987@gmail.com"
    },
    {
      "name": "yyfrankyy",
      "email": "yyfrankyy@gmail.com"
    },
    {
      "name": "nasa.wang",
      "email": "nasa127@gmail.com"
    },
    {
      "name": "xingkui",
      "email": "bit3725@gmail.com"
    }
  ],
  "readme": "# 微信公共帐号机器人(Weixin Robot)\n\nA node.js robot for wechat.\n\n[微信公众平台](http://mp.weixin.qq.com/cgi-bin/indexpage?t=wxm-index&lang=zh_CN)提供的[开放信息接口](http://mp.weixin.qq.com/cgi-bin/indexpage?t=wxm-callbackapi-doc&lang=zh_CN)的自动回复系统。\n\n`weixin-robot` 是 [webot](https://github.com/node-webot/webot) 和 [wechat](https://github.com/node-webot/wechat) 的\n高级包装。`webot` 负责定义回复规则，`wechat` 负责与微信服务器通信。\n\n功能特色：\n\n1. 方便灵活的规则定义，轻松实现文本匹配流程控制\n2. 基于正则表达式的对话设定，配置简单，可以给一句话随机回复不同内容\n3. 支持等待后续操作模式，如可以提示用户“需要我执行xxx操作吗？”\n\n## 使用示例：\n\n添加微信帐号，试试效果：\n\n![豆瓣同城微信帐号二维码：douban-event](http://i.imgur.com/ijE19.jpg)\n![微信机器人测试帐号：webot-test](http://i.imgur.com/6IcAJgH.jpg)\n\n- webot-test 源码：[webot-example](https://github.com/node-webot/webot-example)\n- douban-event 源码：[webot-douban-event](https://github.com/node-webot/webot-douban-event)\n\n## 快速入门 | [FAQ](https://github.com/node-webot/weixin-robot/wiki/FAQ)\n\n```javascript\nvar express = require('express');\nvar webot = require('weixin-robot');\n\nvar app = express();\n\n// 指定回复消息\nwebot.set('hi', '你好');\n\nwebot.set('subscribe', {\n  pattern: function(info) {\n    return info.is('event') && info.param.event === 'subscribe';\n  },\n  handler: function(info) {\n    return '欢迎订阅微信机器人';\n  }\n});\n\n// 接管消息请求\nwebot.watch(app, { token: 'your1weixin2token' });\n\n// 如果需要多个实例：\nwebot2 = webot();\nwebot2.set({\n  '/hi/i': 'Hello',\n  '/who (are|r) (you|u)/i': 'I\\'m a robot.'\n});\nwebot2.watch(app, {\n  token: 'your1wechat2token3',\n  path: '/wechat_en',\n});\n\n// 启动 Web 服务\n// 微信后台只允许 80 端口\napp.listen(80);\n\n// 如果你不想让 node 应用直接监听 80 端口\n// 可以尝试用 nginx 或 apache 自己做一层 proxy\n// app.listen(process.env.PORT);\n// app.enable('trust proxy');\n```\n\n如果一切顺利，你也搭建好了自己的机器人，欢迎到[此项目的 Wiki 页面](https://github.com/node-webot/weixin-robot/wiki/%E4%BD%BF%E7%94%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B8%90%E5%8F%B7)添加你的帐号。\n\n## 命令行工具\n\n提供可执行文件 `webot` 用于发送测试消息。\n使用 `npm` 安装 [webot-cli](https://github.com/node-webot/webot-cli)：\n\n    npm install webot-cli -g\n\n## 自定义菜单\n\n**webot-cli** 提供处理微信自定义菜单的功能，安装好之后执行：\n\n    webot help menu\n\n## weixin-robot 0.3 -> weixin-robot 0.4\n\nweixin-robot 0.4 版本弃用了部分老旧 API ，详见 [History.md](https://github.com/node-webot/weixin-robot/blob/master/History.md)\n\n# API 参考\n\n关于规则定义部分，请参考 [webot](https://github.com/node-webot/webot) 的文档。\n\n## info 对象\n\nwebot rule 的 handler 接收到的 info 对象，有一些针对微信的高级属性。\n\n### 星标消息\n\n微信允许你在回复消息时标记一个 `FuncFlag` ，\n可以在公共平台后台的「星标消息」中查看带标记的消息。\n适合你的机器人不懂如何回复用户消息时使用。\n在 `webot` 中，你只需在 handler 中给 `info.flag` 赋值 `true` 即可。\n\n```javascript\n// 把这句放到你的规则的最末尾\nwebot.set('fallback', {\n  pattern: /.*/,\n  handler: function(info) {\n    info.flag = true;\n    return ['唔.. 暂时听不懂您说的什么呢',\n    '不好意思，我不太懂您说的什么意思',\n    '哎呀，听不懂啦！', \n    '这个我不是很懂，不如我们聊点别的吧？']\n  }\n});\n```\n\n### 请求消息属性\n\n你可以通过 `info.original` 拿到与[微信官方文档](http://mp.weixin.qq.com/wiki/index.php?title=%E6%B6%88%E6%81%AF%E6%8E%A5%E5%8F%A3%E6%8C%87%E5%8D%97#.E6.B6.88.E6.81.AF.E6.8E.A8.E9.80.81)中的 xml 一致的属性值：\n\n    ToUserName      开发者微信号\n    FromUserName    发送方帐号（一个OpenID）\n    CreateTime      消息创建时间 （整型）\n    MsgId           消息id\n    MsgType         text / image / location / link / event\n\n    // MsgType == text\n    Content         文本消息内容\n\n    // MsgType == image\n    PicUrl          图片链接\n\n    // MsgType == location\n    Location_X      地理位置纬度(lat)\n    Location_Y      地理位置经度(lng)\n    Scale           地图缩放大小\n    Label  地理位置信息\n\n    // MsgType == link\n    Title           消息标题\n    Description     消息描述\n    Url             消息链接\n\n    // MsgType == event\n    Event           事件类型，subscribe(订阅)、unsubscribe(取消订阅)、CLICK(自定义菜单点击事件)\n    EventKey        事件KEY值，与自定义菜单接口中KEY值对应\n\n    // MsgType == audio\n    MediaId         媒体文件的 id\n    Format          音频文件的格式\n\n`webot` 的 `info` 把这些值包装为了更符合 js 命名规则的值，并根据 `MsgType` 的不同，\n将额外参数存入了 `info.param` 对象。这样做能保证 `info` 对象的标准化，方便你在\n不同平台使用相同的机器人。例如，地理位置消息( MsgType === 'location') 会被转化为：\n\n```javascript\n{\n  uid: 'the_FromUserName',\n  sp: 'the_ToUserName',\n  id: 'the_MsgId',\n  type: 'location',\n  param: {\n    lat: 'the_Location_X',\n    lng: 'the_Location_Y',\n    scale: 'the_Scale',\n    label: 'the_Label'\n  }\n}\n```\n\n大部分属性值只是把首字母大写换成了小写。\n\n更详细的属性值对应，请查看本模块源码。\n\n### info.reply\n\n你只需在 `rule.handler` 的返回值或 callbak 里提供回复消息的内容，\n`webot.watch` 自带的 express 中间件会自动给 `info.reply` 赋值，\n并将其打包成 XML 发送给微信服务器。\n\n`info.reply` 支持的数据类型：\n\n- {String}   直接回复文本消息，不能超过2048字节\n- {Object}   单条 图文消息/音乐消息\n- {Array}    多条图文消息\n\n#### 回复文本消息\n\n```javascript\ninfo.reply = '收到你的消息了，谢谢'\n```\n\n#### 回复图文消息\n\n    title        消息标题\n    url          消息网址\n    description  消息描述\n    picUrl       消息图片网址\n\n\n```javascript\ninfo.reply = {\n  title: '消息标题',\n  url: 'http://example.com/...',\n  picUrl: 'http://example.com/....a.jpg',\n  description: '对消息的描述出现在这里',\n}\n\n// or\n\ninfo.reply = [{\n  title: '消息1',\n  url: 'http://example.com/...',\n  picUrl: 'http://example.com/....a.jpg',\n  description: '对消息的描述出现在这里',\n}, {\n  title: '消息2',\n  url: 'http://example.com/...',\n  picUrl: 'http://example.com/....a.jpg',\n  description: '对消息的描述出现在这里',\n}]\n```\n\n### 回复音乐消息\n\n    title             标题\n    description       描述\n    musicUrl          音乐链接\n    hqMusicUrl        高质量音乐链接，wifi 环境下会优先使用该链接播放音乐\n\n需指定 `reply.type` 为 `'music'`：\n\n```javascript\ninfo.reply = {\n  type: 'music',\n  title: 'Music 101',\n  musicUrl: 'http://....x.mp3',\n  hqMusicUrl: 'http://....x.m4a'\n}\n```\n\nHave fun with wechat, and enjoy being a robot!\n\n## LICENSE\n\n(The MIT License)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/node-webot/weixin-robot/issues"
  },
  "_id": "weixin-robot@0.4.2-1",
  "_from": "weixin-robot@*"
}
